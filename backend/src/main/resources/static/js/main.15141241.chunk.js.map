{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","domain","corpId","authCode","userId","userName","this","login","className","axios","get","then","res","data","loginAction","catch","error","alert","JSON","stringify","_this","dd","permission","requestAuthCode","onSuccess","code","success","setTimeout","setState","onFail","err","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAgFeA,E,kDA1EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAGTC,OAAQ,GACRC,OAAQ,GACRC,SAAU,GACVC,OAAQ,GACRC,SAAU,IATC,E,0CAanB,WAKI,MAJ0B,KAAtBC,KAAKN,MAAMI,QAEXE,KAAKC,QAIL,aADA,CACA,OAAKC,UAAU,U,mBAOvB,WAAS,IAAD,OACJC,IAAMC,IAAIJ,KAAKN,MAAMC,OAAS,cACzBU,MAAK,SAAAC,GACEA,EAAIC,MACJ,EAAKC,YAAYF,EAAIC,SAE1BE,OAAM,SAAAC,GACTC,MAAM,eAAiBC,KAAKC,UAAUH,S,yBAK9C,SAAYd,GAER,IAAIkB,EAAQd,KACZe,UAAWC,WAAWC,gBAAgB,CAClCrB,OAAQA,EACRsB,UAAW,SAAUZ,GAEjBQ,EAAMpB,MAAMG,SAAWS,EAAIa,KAC3BhB,IAAMC,IAAIU,EAAMpB,MAAMC,OAAS,mBAAqBmB,EAAMpB,MAAMG,UAC9DQ,MAAK,SAAAC,GACH,GAAIA,GAAOA,EAAIC,KAAKa,QAAS,CACzB,IAAItB,EAASQ,EAAIC,KAAKA,KAAKT,OACvBC,EAAWO,EAAIC,KAAKA,KAAKR,SAC7BY,MAAM,6CAAYZ,GAClBsB,YAAW,WACPP,EAAMQ,SAAS,CACXxB,OAAQA,EACRC,SAAUA,MAEf,QAEHY,MAAM,uBAAsBC,KAAKC,UAAUP,OAEhDG,OAAM,SAAAC,GACLC,MAAM,6BAA4BC,KAAKC,UAAUH,QAGzDa,OAAQ,SAAUC,GAEdb,MAAM,iCAAgCC,KAAKC,UAAUW,W,GArEnDC,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.15141241.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport React from 'react';\r\nimport './App.css';\r\nimport * as dd from \"dingtalk-jsapi\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //内网穿透工具介绍:\r\n            // https://developers.dingtalk.com/document/resourcedownload/http-intranet-penetration?pnamespace=app\r\n            domain: \"\",\r\n            corpId: '',\r\n            authCode: '',\r\n            userId: '',\r\n            userName: ''\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.userId === '') {\r\n            // 免登操作\r\n            this.login();\r\n        }\r\n        return (\r\n            // 主编写模块\r\n            <div className=\"App\">\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //登录-获取corpId\r\n    login() {\r\n        axios.get(this.state.domain + \"/getCorpId\")\r\n            .then(res => {\r\n                if (res.data) {\r\n                    this.loginAction(res.data);\r\n                }\r\n            }).catch(error => {\r\n            alert(\"corpId err, \" + JSON.stringify(error))\r\n        })\r\n    }\r\n\r\n    //登录操作\r\n    loginAction(corpId) {\r\n        // alert(\"corpId: \" +  corpId);\r\n        let _this = this;\r\n        dd.runtime.permission.requestAuthCode({\r\n            corpId: corpId,//企业 corpId\r\n            onSuccess: function (res) {\r\n                // 调用成功时回调\r\n                _this.state.authCode = res.code\r\n                axios.get(_this.state.domain + \"/login?authCode=\" + _this.state.authCode\r\n                ).then(res => {\r\n                    if (res && res.data.success) {\r\n                        let userId = res.data.data.userId;\r\n                        let userName = res.data.data.userName;\r\n                        alert('登录成功，你好' + userName);\r\n                        setTimeout(function () {\r\n                            _this.setState({\r\n                                userId: userId,\r\n                                userName: userName\r\n                            })\r\n                        }, 0)\r\n                    } else {\r\n                        alert(\"login failed --->\" + JSON.stringify(res));\r\n                    }\r\n                }).catch(error => {\r\n                    alert(\"httpRequest failed --->\" + JSON.stringify(error))\r\n                })\r\n            },\r\n            onFail: function (err) {\r\n                // 调用失败时回调\r\n                alert(\"requestAuthCode failed --->\" + JSON.stringify(err))\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}